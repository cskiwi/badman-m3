{
  "permissions": {
    "allow": [
      "WebFetch(domain:www.toernooi.nl)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(*)",
      "FileRead(*)",
      "FileEdit(*)",
      "FileWrite(*)",
      "Read(*)",
      "Edit(*)",
      "Write(*)",
      "Bash(npm run build:*)",
      "Bash(npx nx run-many:*)",
      "Bash(cmd /c \"npx nx run-many -t build --prod --verbose\")",
      "Bash(npx nx:*)",
      "Bash(cmd /c \"npm run build\")",
      "Bash(cmd /c \"npx nx run-many -t build --prod\")",
      "Bash(npm:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(ls:*)",
      "Bash(dir)",
      "WebFetch(domain:primeng.org)",
      "Bash(nx build:*)",
      "Bash(nx show:*)",
      "Bash(nx lint:*)",
      "Bash(nx build:*)",
      "Bash(nx run-many:*)",
      "Bash(git add:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(git revert:*)",
      "Bash(npx tsc:*)",
      "WebFetch(domain:www.npmjs.com)",
      "Bash(mkdir:*)",
      "Bash(tail:*)",
      "Bash(nx test:*)",
      "Bash(export BASH_DISABLE_JOB_CONTROL=1)",
      "Bash(mcp restart:*)",
      "Bash(cat:*)",
      "Bash(bash:*)",
      "mcp__postgres-badman__query",
      "mcp__postgres-badman__list_schemas",
      "mcp__postgres-badman__list_tables",
      "WebFetch(domain:api.tournamentsoftware.com)",
      "Bash(curl:*)",
      "Bash(nx g:*)",
      "Bash(mv:*)",
      "Bash(cp:*)",
      "Bash(diff:*)",
      "Bash(git mv:*)",
      "Bash(npx webpack-cli build:*)",
      "mcp__postgres-badman__describe_table",
      "mcp__kubernetes__pods_list",
      "mcp__kubernetes__pods_log",
      "mcp__kubernetes__resources_get",
      "mcp__kubernetes__pods_exec",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_press_key",
      "mcp__redis-mcp-server__scan_all_keys",
      "mcp__redis-mcp-server__lrange",
      "mcp__redis-mcp-server__get",
      "mcp__redis-mcp-server__hgetall",
      "mcp__redis-mcp-server__zrange",
      "mcp__redis-mcp-server__llen",
      "mcp__context7-server__resolve-library-id",
      "mcp__context7-server__get-library-docs",
      "Bash(redis-cli:*)",
      "mcp__redis-mcp-server__get_indexed_keys_number",
      "mcp__redis-mcp-server__scan_keys",
      "Bash(NX_CLOUD_NO_TIMEOUTS=true npx nx build frontend-pages-competition)",
      "mcp__redis-mcp-server__type",
      "mcp__redis-mcp-server__smembers",
      "mcp__redis-mcp-server__hget",
      "mcp__redis-mcp-server__delete",
      "mcp__kubernetes__namespaces_list",
      "mcp__kubernetes__resources_list",
      "mcp__task-master__get_task",
      "Bash(task-master list:*)",
      "WebSearch"
    ],
    "deny": []
  },
  "deniedTools": ["mcp__task-master__initialize_project"],
  "hooks": {
    "SessionStart": [
      {
        "matcher": "startup",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/load-behavioral-system.sh"
          }
        ]
      },
      {
        "matcher": "resume",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/load-behavioral-system.sh"
          }
        ]
      },
      {
        "matcher": "clear",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/load-behavioral-system.sh"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/block-destructive-commands.sh"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/directive-enforcer.sh"
          },
          {
            "type": "command",
            "command": "bash .claude/hooks/collective-metrics.sh"
          }
        ]
      },
      {
        "matcher": ".*",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/collective-metrics.sh"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/test-driven-handoff.sh"
          },
          {
            "type": "command",
            "command": "bash .claude/hooks/collective-metrics.sh"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/collective-metrics.sh"
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "matcher": "mock-.*",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/mock-deliverable-generator.sh"
          },
          {
            "type": "command",
            "command": "bash .claude/hooks/test-driven-handoff.sh"
          },
          {
            "type": "command",
            "command": "bash .claude/hooks/collective-metrics.sh"
          }
        ]
      },
      {
        "matcher": ".*",
        "hooks": [
          {
            "type": "command",
            "command": "bash .claude/hooks/test-driven-handoff.sh"
          },
          {
            "type": "command",
            "command": "bash .claude/hooks/collective-metrics.sh"
          }
        ]
      }
    ]
  }
}
